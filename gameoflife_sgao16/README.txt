Shen Gao
04/28/21
Project 3
	For this project, I used lots of public methods and private method to help me operate the program. First, I create 2 classes, which are GameOfLife(JFrame) and GameCanvas(JPanel). In the GameOfLife class, I didn’t write too much code. I just set the title and the size for it and made it visible. But in the GameCanvas class, I wrote all my methods here. I first set the grid for the canvas and drew the lines with color gray. As it progresses, I add a substitutionArray to make an substitution for life array, which represents the cell after changing status. Then, I create display method to show the cells on the grid. After that, I create random method to randomize the cells, and it provides the function for the randomizeButton. Later, I create a coordinateValidity method to check whether the coordination is in the grid, and then used it in the check method, which is the core of this program. According to instructions, I have to check the number of cells around a target cell. So, I draw a sudoku-like graph on the paper and set the middle one to be the target cell. Then, all I have to do is checking the rest 8 cells, whether they are alive or not, and check the number of them. With idea like this, I wrote the check method. Later, in the actionPerformed method, I set the rule here and checking the live cell number. If there are exactly 2 or 3, then substitution array would be alive(show the status). Otherwise, even though the original life array shows the cell is alive, it will die in the substitution array. Then, I made clear method to clear everything in the grid and allows user to start the game again. The above method will accomplish the basic requirements.
	I am doing this project alone, but I actually add 3 flourishes in this project. For the first one, it is the easiest, I just set different colors for the dead and live cells and the grid (flourish g). Then, for the second flourish, I made a timeSpinner to let user customize the simulation speed. The default speed is 1000 milliseconds, which is 1 second. However, I feel like it updates too slow so I made the timeSpinner that could make it faster. For the third flourish, I saw professor allows us to make a edit mode flourish. So I learnt a bit online of using MouseListener. There are 7 mouse events, but I only used mousePressed, mouseDragged and mouseReleased method. For the mousePressed method, it allows the mouse to check whether the cell is alive or dead, and then it could change the cell’s status, and finally repaint the canvas. During the process, the timer will stop. For the mouseDragged method, it’s similar to pressed method. But in addition, it could actually draw the patterns of the cells, which provide more possibility for this program. Then, for the mouseReleased method, I start the timer again and set initial back to -1. 
	I tried my best to make this project as more interactive as possible. I made 4 buttons, 1 spinners and mouseListener. For the pause button, it stops the timer and user can make changes on the canvas or stop and watch the patterns of the cell. For the start button, it restart the timer to let the project run again. For the clear button, it cleans everything and allows user to customize the cells. For the randomize button, user can randomly set the canvas. And as I mentioned, the spinner could adjust the timer’s speed. And for the mouse function, it allows users to customize the pattern on their own. 
	In the end, I feel like my favorite part of this course is doing projects. Every project is a new challenge for me. But during the process, I learnt many new things outside of the class, and reviewed what we learnt in the class. The project has some magical attraction to me that made me tireless. I couldn’t feel sleepy and hungry when I do this project because in any moment, I might come up with some new ideas or solutions. I tried my best to make it perfect although I knew there are still lots of blemish. Hope you like it!
